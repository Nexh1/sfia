<?php

namespace App\Controller;

use App\Entity\Article;
use App\Form\ArticleCreateType;
use App\Repository\ArticleRepository;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\File;

class AdminArticleController extends AbstractController
{
    /**
     * @Route("/admin/creer_article", name="article_create")
     * @Route("/admin/editer_article/{id}", name="article_edit")
     */
    public function createArticle(Article $id = null, Request $request, ObjectManager $manager, ArticleRepository $repoArticle)
    {   
        // check if the article already exist
        if($id) {
            $article = $repoArticle->find($id);
            $currentImage = $article->getImage();
            // show the image
            $article->setImage(
                new File($this->getParameter('articles_directory').'/'.$article->getImage())
            );
            $editMode = true;
        } else {
            // create new article
            $article = new Article();
            $editMode = false;
        }
        
        $form = $this->createForm(ArticleCreateType::class, $article);    
        
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()) {

            $file = $article->getImage();
            
            if($file) {
                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                try {
                    $file->move(
                        $this->getParameter('articles_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    $this->addFlash(
                        'danger',
                        "Une erreur s'est produite pendant le chargement de l'image."
                    );
                    $this-redirectToRoute('article_show');
                } 
                $article->setImage($fileName);
            } else {    
                $article->setImage($currentImage);          
            }
            
            if(!$id) {
                $user = $this->getUser();
                $article->setUser($user);
                $article->setCreatedAt(new \DateTime());
            }
            
            $manager->merge($article);
            $manager->flush();
            
            $this->addFlash(
                'success',
                "L'article a été ajouté avec succès !"
            );

            return $this->redirectToRoute('article_show');
        }
        
        return $this->render('article/create.html.twig', [
            'form' => $form->createView(),
            'article' => $article,
            'editMode' => $editMode
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/actualites" , name="actualites")
     */
    public function actualites(ArticleRepository $articleRepo) {
        $articles = array_reverse($articleRepo->findByDate());
        
        return $this->render('article/actu.html.twig', [
            'articles' => $articles
        ]);
    }

    /**    
     * @Route("/admin/liste_articles", name="article_show")
     */
    public function showArticle(ArticleRepository $repoArticle)
    {

        $articles = $repoArticle->findByDate();
        return $this->render('article/show.html.twig', [
            'articles' =>$articles,
        ]);
    }

    /**
     * @Route("/admin/delete_article{id}", name="article_delete")
     */
    public function deleteArticle($id, ArticleRepository $articleRepo, ObjectManager $manager) {
        $article = $articleRepo->find($id);

        if($article) {
            $manager->remove($article);
            $manager->flush();

            $this->addFlash(
                'warning',
                "L'article a bien été supprimé !"
            );
        }
        return $this->redirectToRoute('article_show');
    }

    /**
     * @Route("/actualites/{id}" , name="article_display")
     */
    public function displayArticle($id, ArticleRepository $articleRepo) {
        $article = $articleRepo->find($id);

        return $this->render('article/article.html.twig', [
            'article' => $article
            
        ]);
    }
}
